/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as environments from "../../../../environments";
import * as core from "../../../../core";
import * as Ittybit from "../../../index";
import urlJoin from "url-join";
import * as errors from "../../../../errors/index";

export declare namespace Media {
    export interface Options {
        environment?: core.Supplier<environments.IttybitEnvironment | string>;
        /** Specify a custom URL to connect the client to. */
        baseUrl?: core.Supplier<string>;
        token: core.Supplier<core.BearerToken>;
        fetcher?: core.FetchFunction;
    }

    export interface RequestOptions {
        /** The maximum time to wait for a response in seconds. */
        timeoutInSeconds?: number;
        /** The number of times to retry the request. Defaults to 2. */
        maxRetries?: number;
        /** A hook to abort the request. */
        abortSignal?: AbortSignal;
        /** Additional headers to include in the request. */
        headers?: Record<string, string>;
    }
}

/**
 * Manage media items (collections of files)
 */
export class Media {
    constructor(protected readonly _options: Media.Options) {}

    /**
     * Retrieves a list of all media for the current project
     *
     * @param {Ittybit.MediaListRequest} request
     * @param {Media.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Ittybit.UnauthorizedError}
     * @throws {@link Ittybit.ForbiddenError}
     *
     * @example
     *     await client.media.list()
     */
    public list(
        request: Ittybit.MediaListRequest = {},
        requestOptions?: Media.RequestOptions,
    ): core.HttpResponsePromise<Ittybit.MediaListResponse> {
        return core.HttpResponsePromise.fromPromise(this.__list(request, requestOptions));
    }

    private async __list(
        request: Ittybit.MediaListRequest = {},
        requestOptions?: Media.RequestOptions,
    ): Promise<core.WithRawResponse<Ittybit.MediaListResponse>> {
        const { page, limit } = request;
        const _queryParams: Record<string, string | string[] | object | object[] | null> = {};
        if (page != null) {
            _queryParams["page"] = page.toString();
        }

        if (limit != null) {
            _queryParams["limit"] = limit.toString();
        }

        const _response = await (this._options.fetcher ?? core.fetcher)({
            url: urlJoin(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.IttybitEnvironment.Default,
                "media",
            ),
            method: "GET",
            headers: {
                Authorization: await this._getAuthorizationHeader(),
                "X-Fern-Language": "JavaScript",
                "X-Fern-SDK-Name": "@ittybit/sdk",
                "X-Fern-SDK-Version": "0.7.1",
                "User-Agent": "@ittybit/sdk/0.7.1",
                "X-Fern-Runtime": core.RUNTIME.type,
                "X-Fern-Runtime-Version": core.RUNTIME.version,
                ...requestOptions?.headers,
            },
            contentType: "application/json",
            queryParameters: _queryParams,
            requestType: "json",
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return { data: _response.body as Ittybit.MediaListResponse, rawResponse: _response.rawResponse };
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 401:
                    throw new Ittybit.UnauthorizedError(_response.error.body as unknown, _response.rawResponse);
                case 403:
                    throw new Ittybit.ForbiddenError(_response.error.body as unknown, _response.rawResponse);
                default:
                    throw new errors.IttybitError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                        rawResponse: _response.rawResponse,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.IttybitError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.IttybitTimeoutError("Timeout exceeded when calling GET /media.");
            case "unknown":
                throw new errors.IttybitError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    /**
     * Creates a new media item from a URL or as an empty placeholder
     *
     * @param {Ittybit.MediaCreateRequest} request
     * @param {Media.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Ittybit.BadRequestError}
     * @throws {@link Ittybit.UnauthorizedError}
     * @throws {@link Ittybit.ForbiddenError}
     *
     * @example
     *     await client.media.create({
     *         url: "https://storage.googleapis.com/gtv-videos-bucket/sample/ForBiggerEscapes.mp4",
     *         folder: "examples/movies",
     *         filename: "escapes.mp4",
     *         metadata: {
     *             "genre": "Animation",
     *             "rating": "G"
     *         }
     *     })
     *
     * @example
     *     await client.media.create({
     *         title: "Placeholder for User Upload",
     *         metadata: {
     *             "user_id": "user_789"
     *         },
     *         empty: true
     *     })
     */
    public create(
        request: Ittybit.MediaCreateRequest = {},
        requestOptions?: Media.RequestOptions,
    ): core.HttpResponsePromise<Ittybit.MediaResponse> {
        return core.HttpResponsePromise.fromPromise(this.__create(request, requestOptions));
    }

    private async __create(
        request: Ittybit.MediaCreateRequest = {},
        requestOptions?: Media.RequestOptions,
    ): Promise<core.WithRawResponse<Ittybit.MediaResponse>> {
        const _response = await (this._options.fetcher ?? core.fetcher)({
            url: urlJoin(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.IttybitEnvironment.Default,
                "media",
            ),
            method: "POST",
            headers: {
                Authorization: await this._getAuthorizationHeader(),
                "X-Fern-Language": "JavaScript",
                "X-Fern-SDK-Name": "@ittybit/sdk",
                "X-Fern-SDK-Version": "0.7.1",
                "User-Agent": "@ittybit/sdk/0.7.1",
                "X-Fern-Runtime": core.RUNTIME.type,
                "X-Fern-Runtime-Version": core.RUNTIME.version,
                ...requestOptions?.headers,
            },
            contentType: "application/json",
            requestType: "json",
            body: request,
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return { data: _response.body as Ittybit.MediaResponse, rawResponse: _response.rawResponse };
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 400:
                    throw new Ittybit.BadRequestError(_response.error.body as unknown, _response.rawResponse);
                case 401:
                    throw new Ittybit.UnauthorizedError(_response.error.body as unknown, _response.rawResponse);
                case 403:
                    throw new Ittybit.ForbiddenError(_response.error.body as unknown, _response.rawResponse);
                default:
                    throw new errors.IttybitError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                        rawResponse: _response.rawResponse,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.IttybitError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.IttybitTimeoutError("Timeout exceeded when calling POST /media.");
            case "unknown":
                throw new errors.IttybitError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    /**
     * Retrieves a specific media item by its ID
     *
     * @param {string} id - The media ID
     * @param {Media.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Ittybit.UnauthorizedError}
     * @throws {@link Ittybit.ForbiddenError}
     * @throws {@link Ittybit.NotFoundError}
     *
     * @example
     *     await client.media.get("id")
     */
    public get(id: string, requestOptions?: Media.RequestOptions): core.HttpResponsePromise<Ittybit.MediaGetResponse> {
        return core.HttpResponsePromise.fromPromise(this.__get(id, requestOptions));
    }

    private async __get(
        id: string,
        requestOptions?: Media.RequestOptions,
    ): Promise<core.WithRawResponse<Ittybit.MediaGetResponse>> {
        const _response = await (this._options.fetcher ?? core.fetcher)({
            url: urlJoin(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.IttybitEnvironment.Default,
                `media/${encodeURIComponent(id)}`,
            ),
            method: "GET",
            headers: {
                Authorization: await this._getAuthorizationHeader(),
                "X-Fern-Language": "JavaScript",
                "X-Fern-SDK-Name": "@ittybit/sdk",
                "X-Fern-SDK-Version": "0.7.1",
                "User-Agent": "@ittybit/sdk/0.7.1",
                "X-Fern-Runtime": core.RUNTIME.type,
                "X-Fern-Runtime-Version": core.RUNTIME.version,
                ...requestOptions?.headers,
            },
            contentType: "application/json",
            requestType: "json",
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return { data: _response.body as Ittybit.MediaGetResponse, rawResponse: _response.rawResponse };
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 401:
                    throw new Ittybit.UnauthorizedError(_response.error.body as unknown, _response.rawResponse);
                case 403:
                    throw new Ittybit.ForbiddenError(_response.error.body as unknown, _response.rawResponse);
                case 404:
                    throw new Ittybit.NotFoundError(_response.error.body as unknown, _response.rawResponse);
                default:
                    throw new errors.IttybitError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                        rawResponse: _response.rawResponse,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.IttybitError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.IttybitTimeoutError("Timeout exceeded when calling GET /media/{id}.");
            case "unknown":
                throw new errors.IttybitError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    /**
     * Deletes a specific media item by its ID
     *
     * @param {string} id - The media ID
     * @param {Media.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Ittybit.UnauthorizedError}
     * @throws {@link Ittybit.ForbiddenError}
     * @throws {@link Ittybit.NotFoundError}
     *
     * @example
     *     await client.media.delete("id")
     */
    public delete(
        id: string,
        requestOptions?: Media.RequestOptions,
    ): core.HttpResponsePromise<Ittybit.ConfirmationResponse> {
        return core.HttpResponsePromise.fromPromise(this.__delete(id, requestOptions));
    }

    private async __delete(
        id: string,
        requestOptions?: Media.RequestOptions,
    ): Promise<core.WithRawResponse<Ittybit.ConfirmationResponse>> {
        const _response = await (this._options.fetcher ?? core.fetcher)({
            url: urlJoin(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.IttybitEnvironment.Default,
                `media/${encodeURIComponent(id)}`,
            ),
            method: "DELETE",
            headers: {
                Authorization: await this._getAuthorizationHeader(),
                "X-Fern-Language": "JavaScript",
                "X-Fern-SDK-Name": "@ittybit/sdk",
                "X-Fern-SDK-Version": "0.7.1",
                "User-Agent": "@ittybit/sdk/0.7.1",
                "X-Fern-Runtime": core.RUNTIME.type,
                "X-Fern-Runtime-Version": core.RUNTIME.version,
                ...requestOptions?.headers,
            },
            contentType: "application/json",
            requestType: "json",
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return { data: _response.body as Ittybit.ConfirmationResponse, rawResponse: _response.rawResponse };
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 401:
                    throw new Ittybit.UnauthorizedError(_response.error.body as unknown, _response.rawResponse);
                case 403:
                    throw new Ittybit.ForbiddenError(_response.error.body as unknown, _response.rawResponse);
                case 404:
                    throw new Ittybit.NotFoundError(_response.error.body as unknown, _response.rawResponse);
                default:
                    throw new errors.IttybitError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                        rawResponse: _response.rawResponse,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.IttybitError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.IttybitTimeoutError("Timeout exceeded when calling DELETE /media/{id}.");
            case "unknown":
                throw new errors.IttybitError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    protected async _getAuthorizationHeader(): Promise<string> {
        return `Bearer ${await core.Supplier.get(this._options.token)}`;
    }
}
