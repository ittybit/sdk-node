/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as environments from "../../../../environments";
import * as core from "../../../../core";
import * as Ittybit from "../../../index";
import urlJoin from "url-join";
import * as errors from "../../../../errors/index";

export declare namespace Automations {
    export interface Options {
        environment?: core.Supplier<environments.IttybitEnvironment | string>;
        /** Specify a custom URL to connect the client to. */
        baseUrl?: core.Supplier<string>;
        token: core.Supplier<core.BearerToken>;
        fetcher?: core.FetchFunction;
    }

    export interface RequestOptions {
        /** The maximum time to wait for a response in seconds. */
        timeoutInSeconds?: number;
        /** The number of times to retry the request. Defaults to 2. */
        maxRetries?: number;
        /** A hook to abort the request. */
        abortSignal?: AbortSignal;
        /** Additional headers to include in the request. */
        headers?: Record<string, string>;
    }
}

/**
 * Manage automated workflows
 */
export class Automations {
    constructor(protected readonly _options: Automations.Options) {}

    /**
     * Retrieves a list of all automations for the current project
     *
     * @param {Automations.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Ittybit.UnauthorizedError}
     * @throws {@link Ittybit.ForbiddenError}
     *
     * @example
     *     await client.automations.list()
     */
    public list(
        requestOptions?: Automations.RequestOptions,
    ): core.HttpResponsePromise<Ittybit.AutomationsListResponse> {
        return core.HttpResponsePromise.fromPromise(this.__list(requestOptions));
    }

    private async __list(
        requestOptions?: Automations.RequestOptions,
    ): Promise<core.WithRawResponse<Ittybit.AutomationsListResponse>> {
        const _response = await (this._options.fetcher ?? core.fetcher)({
            url: urlJoin(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.IttybitEnvironment.Default,
                "automations",
            ),
            method: "GET",
            headers: {
                Authorization: await this._getAuthorizationHeader(),
                "X-Fern-Language": "JavaScript",
                "X-Fern-SDK-Name": "@ittybit/sdk",
                "X-Fern-SDK-Version": "0.7.1",
                "User-Agent": "@ittybit/sdk/0.7.1",
                "X-Fern-Runtime": core.RUNTIME.type,
                "X-Fern-Runtime-Version": core.RUNTIME.version,
                ...requestOptions?.headers,
            },
            contentType: "application/json",
            requestType: "json",
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return { data: _response.body as Ittybit.AutomationsListResponse, rawResponse: _response.rawResponse };
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 401:
                    throw new Ittybit.UnauthorizedError(_response.error.body as unknown, _response.rawResponse);
                case 403:
                    throw new Ittybit.ForbiddenError(_response.error.body as unknown, _response.rawResponse);
                default:
                    throw new errors.IttybitError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                        rawResponse: _response.rawResponse,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.IttybitError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.IttybitTimeoutError("Timeout exceeded when calling GET /automations.");
            case "unknown":
                throw new errors.IttybitError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    /**
     * Creates a new automation for the current project
     *
     * @param {Automations.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Ittybit.BadRequestError}
     * @throws {@link Ittybit.UnauthorizedError}
     * @throws {@link Ittybit.ForbiddenError}
     *
     * @example
     *     await client.automations.create()
     */
    public create(requestOptions?: Automations.RequestOptions): core.HttpResponsePromise<Ittybit.AutomationResponse> {
        return core.HttpResponsePromise.fromPromise(this.__create(requestOptions));
    }

    private async __create(
        requestOptions?: Automations.RequestOptions,
    ): Promise<core.WithRawResponse<Ittybit.AutomationResponse>> {
        const _response = await (this._options.fetcher ?? core.fetcher)({
            url: urlJoin(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.IttybitEnvironment.Default,
                "automations",
            ),
            method: "POST",
            headers: {
                Authorization: await this._getAuthorizationHeader(),
                "X-Fern-Language": "JavaScript",
                "X-Fern-SDK-Name": "@ittybit/sdk",
                "X-Fern-SDK-Version": "0.7.1",
                "User-Agent": "@ittybit/sdk/0.7.1",
                "X-Fern-Runtime": core.RUNTIME.type,
                "X-Fern-Runtime-Version": core.RUNTIME.version,
                ...requestOptions?.headers,
            },
            contentType: "application/json",
            requestType: "json",
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return { data: _response.body as Ittybit.AutomationResponse, rawResponse: _response.rawResponse };
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 400:
                    throw new Ittybit.BadRequestError(_response.error.body as unknown, _response.rawResponse);
                case 401:
                    throw new Ittybit.UnauthorizedError(_response.error.body as unknown, _response.rawResponse);
                case 403:
                    throw new Ittybit.ForbiddenError(_response.error.body as unknown, _response.rawResponse);
                default:
                    throw new errors.IttybitError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                        rawResponse: _response.rawResponse,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.IttybitError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.IttybitTimeoutError("Timeout exceeded when calling POST /automations.");
            case "unknown":
                throw new errors.IttybitError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    /**
     * Retrieves a specific automation by its ID
     *
     * @param {string} id - The automation ID
     * @param {Automations.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Ittybit.UnauthorizedError}
     * @throws {@link Ittybit.ForbiddenError}
     * @throws {@link Ittybit.NotFoundError}
     *
     * @example
     *     await client.automations.get("id")
     */
    public get(
        id: string,
        requestOptions?: Automations.RequestOptions,
    ): core.HttpResponsePromise<Ittybit.AutomationResponse> {
        return core.HttpResponsePromise.fromPromise(this.__get(id, requestOptions));
    }

    private async __get(
        id: string,
        requestOptions?: Automations.RequestOptions,
    ): Promise<core.WithRawResponse<Ittybit.AutomationResponse>> {
        const _response = await (this._options.fetcher ?? core.fetcher)({
            url: urlJoin(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.IttybitEnvironment.Default,
                `automations/${encodeURIComponent(id)}`,
            ),
            method: "GET",
            headers: {
                Authorization: await this._getAuthorizationHeader(),
                "X-Fern-Language": "JavaScript",
                "X-Fern-SDK-Name": "@ittybit/sdk",
                "X-Fern-SDK-Version": "0.7.1",
                "User-Agent": "@ittybit/sdk/0.7.1",
                "X-Fern-Runtime": core.RUNTIME.type,
                "X-Fern-Runtime-Version": core.RUNTIME.version,
                ...requestOptions?.headers,
            },
            contentType: "application/json",
            requestType: "json",
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return { data: _response.body as Ittybit.AutomationResponse, rawResponse: _response.rawResponse };
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 401:
                    throw new Ittybit.UnauthorizedError(_response.error.body as unknown, _response.rawResponse);
                case 403:
                    throw new Ittybit.ForbiddenError(_response.error.body as unknown, _response.rawResponse);
                case 404:
                    throw new Ittybit.NotFoundError(_response.error.body as unknown, _response.rawResponse);
                default:
                    throw new errors.IttybitError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                        rawResponse: _response.rawResponse,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.IttybitError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.IttybitTimeoutError("Timeout exceeded when calling GET /automations/{id}.");
            case "unknown":
                throw new errors.IttybitError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    /**
     * Updates an existing automation by its ID
     *
     * @param {string} id - The ID of the automation to update.
     * @param {Ittybit.AutomationsUpdateRequest} request
     * @param {Automations.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Ittybit.BadRequestError}
     * @throws {@link Ittybit.UnauthorizedError}
     * @throws {@link Ittybit.ForbiddenError}
     * @throws {@link Ittybit.NotFoundError}
     *
     * @example
     *     await client.automations.update("id", {
     *         name: "Transcode Uploaded Videos (Updated)",
     *         trigger: [{
     *                 "event": "media.ready",
     *                 "conditions": [
     *                     {
     *                         "prop": "media.kind",
     *                         "value": "image"
     *                     }
     *                 ]
     *             }]
     *     })
     */
    public update(
        id: string,
        request: Ittybit.AutomationsUpdateRequest,
        requestOptions?: Automations.RequestOptions,
    ): core.HttpResponsePromise<Ittybit.AutomationResponse> {
        return core.HttpResponsePromise.fromPromise(this.__update(id, request, requestOptions));
    }

    private async __update(
        id: string,
        request: Ittybit.AutomationsUpdateRequest,
        requestOptions?: Automations.RequestOptions,
    ): Promise<core.WithRawResponse<Ittybit.AutomationResponse>> {
        const _response = await (this._options.fetcher ?? core.fetcher)({
            url: urlJoin(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.IttybitEnvironment.Default,
                `automations/${encodeURIComponent(id)}`,
            ),
            method: "PUT",
            headers: {
                Authorization: await this._getAuthorizationHeader(),
                "X-Fern-Language": "JavaScript",
                "X-Fern-SDK-Name": "@ittybit/sdk",
                "X-Fern-SDK-Version": "0.7.1",
                "User-Agent": "@ittybit/sdk/0.7.1",
                "X-Fern-Runtime": core.RUNTIME.type,
                "X-Fern-Runtime-Version": core.RUNTIME.version,
                ...requestOptions?.headers,
            },
            contentType: "application/json",
            requestType: "json",
            body: request,
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return { data: _response.body as Ittybit.AutomationResponse, rawResponse: _response.rawResponse };
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 400:
                    throw new Ittybit.BadRequestError(_response.error.body as unknown, _response.rawResponse);
                case 401:
                    throw new Ittybit.UnauthorizedError(_response.error.body as unknown, _response.rawResponse);
                case 403:
                    throw new Ittybit.ForbiddenError(_response.error.body as unknown, _response.rawResponse);
                case 404:
                    throw new Ittybit.NotFoundError(_response.error.body as unknown, _response.rawResponse);
                default:
                    throw new errors.IttybitError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                        rawResponse: _response.rawResponse,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.IttybitError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.IttybitTimeoutError("Timeout exceeded when calling PUT /automations/{id}.");
            case "unknown":
                throw new errors.IttybitError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    /**
     * Deletes an automation by its ID
     *
     * @param {string} id - The automation ID
     * @param {Automations.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Ittybit.UnauthorizedError}
     * @throws {@link Ittybit.ForbiddenError}
     * @throws {@link Ittybit.NotFoundError}
     *
     * @example
     *     await client.automations.delete("id")
     */
    public delete(id: string, requestOptions?: Automations.RequestOptions): core.HttpResponsePromise<void> {
        return core.HttpResponsePromise.fromPromise(this.__delete(id, requestOptions));
    }

    private async __delete(
        id: string,
        requestOptions?: Automations.RequestOptions,
    ): Promise<core.WithRawResponse<void>> {
        const _response = await (this._options.fetcher ?? core.fetcher)({
            url: urlJoin(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.IttybitEnvironment.Default,
                `automations/${encodeURIComponent(id)}`,
            ),
            method: "DELETE",
            headers: {
                Authorization: await this._getAuthorizationHeader(),
                "X-Fern-Language": "JavaScript",
                "X-Fern-SDK-Name": "@ittybit/sdk",
                "X-Fern-SDK-Version": "0.7.1",
                "User-Agent": "@ittybit/sdk/0.7.1",
                "X-Fern-Runtime": core.RUNTIME.type,
                "X-Fern-Runtime-Version": core.RUNTIME.version,
                ...requestOptions?.headers,
            },
            contentType: "application/json",
            requestType: "json",
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return { data: undefined, rawResponse: _response.rawResponse };
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 401:
                    throw new Ittybit.UnauthorizedError(_response.error.body as unknown, _response.rawResponse);
                case 403:
                    throw new Ittybit.ForbiddenError(_response.error.body as unknown, _response.rawResponse);
                case 404:
                    throw new Ittybit.NotFoundError(_response.error.body as unknown, _response.rawResponse);
                default:
                    throw new errors.IttybitError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                        rawResponse: _response.rawResponse,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.IttybitError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.IttybitTimeoutError("Timeout exceeded when calling DELETE /automations/{id}.");
            case "unknown":
                throw new errors.IttybitError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    protected async _getAuthorizationHeader(): Promise<string> {
        return `Bearer ${await core.Supplier.get(this._options.token)}`;
    }
}
