/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as environments from "../../../../environments";
import * as core from "../../../../core";
import * as Ittybit from "../../../index";
import urlJoin from "url-join";
import * as errors from "../../../../errors/index";

export declare namespace Tasks {
    export interface Options {
        environment?: core.Supplier<environments.IttybitEnvironment | string>;
        /** Specify a custom URL to connect the client to. */
        baseUrl?: core.Supplier<string>;
        token?: core.Supplier<core.BearerToken | undefined>;
        /** Override the ACCEPT_VERSION header */
        version?: core.Supplier<number | undefined>;
        fetcher?: core.FetchFunction;
    }

    export interface RequestOptions {
        /** The maximum time to wait for a response in seconds. */
        timeoutInSeconds?: number;
        /** The number of times to retry the request. Defaults to 2. */
        maxRetries?: number;
        /** A hook to abort the request. */
        abortSignal?: AbortSignal;
        /** Override the ACCEPT_VERSION header */
        version?: number | undefined;
        /** Additional headers to include in the request. */
        headers?: Record<string, string>;
    }
}

/**
 * You can use the `/tasks` and `/tasks/{id}` endpoints to manage processing tasks.
 */
export class Tasks {
    constructor(protected readonly _options: Tasks.Options = {}) {}

    /**
     * @param {Ittybit.TasksListRequest} request
     * @param {Tasks.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.tasks.list()
     */
    public list(
        request: Ittybit.TasksListRequest = {},
        requestOptions?: Tasks.RequestOptions,
    ): core.HttpResponsePromise<Ittybit.TaskListResponse> {
        return core.HttpResponsePromise.fromPromise(this.__list(request, requestOptions));
    }

    private async __list(
        request: Ittybit.TasksListRequest = {},
        requestOptions?: Tasks.RequestOptions,
    ): Promise<core.WithRawResponse<Ittybit.TaskListResponse>> {
        const { limit } = request;
        const _queryParams: Record<string, string | string[] | object | object[] | null> = {};
        if (limit != null) {
            _queryParams["limit"] = limit.toString();
        }

        const _response = await (this._options.fetcher ?? core.fetcher)({
            url: urlJoin(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.IttybitEnvironment.Default,
                "tasks",
            ),
            method: "GET",
            headers: {
                Authorization: await this._getAuthorizationHeader(),
                ACCEPT_VERSION:
                    (await core.Supplier.get(this._options.version)) != null
                        ? (await core.Supplier.get(this._options.version)).toString()
                        : undefined,
                "X-Fern-Language": "JavaScript",
                "X-Fern-SDK-Name": "@ittybit/sdk",
                "X-Fern-SDK-Version": "0.8.0",
                "User-Agent": "@ittybit/sdk/0.8.0",
                "X-Fern-Runtime": core.RUNTIME.type,
                "X-Fern-Runtime-Version": core.RUNTIME.version,
                ...requestOptions?.headers,
            },
            contentType: "application/json",
            queryParameters: _queryParams,
            requestType: "json",
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return { data: _response.body as Ittybit.TaskListResponse, rawResponse: _response.rawResponse };
        }

        if (_response.error.reason === "status-code") {
            throw new errors.IttybitError({
                statusCode: _response.error.statusCode,
                body: _response.error.body,
                rawResponse: _response.rawResponse,
            });
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.IttybitError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.IttybitTimeoutError("Timeout exceeded when calling GET /tasks.");
            case "unknown":
                throw new errors.IttybitError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    /**
     * Creates a new task item. See [Tasks](/docs/tasks) for detailed coverage of all available props and values.
     *
     * @param {unknown} request
     * @param {Tasks.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.tasks.create({
     *         "file_id": "file_abcdefgh1234",
     *         "kind": "image",
     *         "width": 320,
     *         "format": "png",
     *         "ref": "thumbnail"
     *     })
     */
    public create(
        request?: unknown,
        requestOptions?: Tasks.RequestOptions,
    ): core.HttpResponsePromise<Ittybit.TaskResponse> {
        return core.HttpResponsePromise.fromPromise(this.__create(request, requestOptions));
    }

    private async __create(
        request?: unknown,
        requestOptions?: Tasks.RequestOptions,
    ): Promise<core.WithRawResponse<Ittybit.TaskResponse>> {
        const _response = await (this._options.fetcher ?? core.fetcher)({
            url: urlJoin(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.IttybitEnvironment.Default,
                "tasks",
            ),
            method: "POST",
            headers: {
                Authorization: await this._getAuthorizationHeader(),
                ACCEPT_VERSION:
                    (await core.Supplier.get(this._options.version)) != null
                        ? (await core.Supplier.get(this._options.version)).toString()
                        : undefined,
                "X-Fern-Language": "JavaScript",
                "X-Fern-SDK-Name": "@ittybit/sdk",
                "X-Fern-SDK-Version": "0.8.0",
                "User-Agent": "@ittybit/sdk/0.8.0",
                "X-Fern-Runtime": core.RUNTIME.type,
                "X-Fern-Runtime-Version": core.RUNTIME.version,
                ...requestOptions?.headers,
            },
            contentType: "application/json",
            requestType: "json",
            body: request,
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return { data: _response.body as Ittybit.TaskResponse, rawResponse: _response.rawResponse };
        }

        if (_response.error.reason === "status-code") {
            throw new errors.IttybitError({
                statusCode: _response.error.statusCode,
                body: _response.error.body,
                rawResponse: _response.rawResponse,
            });
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.IttybitError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.IttybitTimeoutError("Timeout exceeded when calling POST /tasks.");
            case "unknown":
                throw new errors.IttybitError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    /**
     * Retrieves the task object for a task with the given ID.
     *
     * @param {string} id
     * @param {Tasks.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.tasks.get("id")
     */
    public get(id: string, requestOptions?: Tasks.RequestOptions): core.HttpResponsePromise<Ittybit.TaskResponse> {
        return core.HttpResponsePromise.fromPromise(this.__get(id, requestOptions));
    }

    private async __get(
        id: string,
        requestOptions?: Tasks.RequestOptions,
    ): Promise<core.WithRawResponse<Ittybit.TaskResponse>> {
        const _response = await (this._options.fetcher ?? core.fetcher)({
            url: urlJoin(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.IttybitEnvironment.Default,
                `tasks/${encodeURIComponent(id)}`,
            ),
            method: "GET",
            headers: {
                Authorization: await this._getAuthorizationHeader(),
                ACCEPT_VERSION:
                    (await core.Supplier.get(this._options.version)) != null
                        ? (await core.Supplier.get(this._options.version)).toString()
                        : undefined,
                "X-Fern-Language": "JavaScript",
                "X-Fern-SDK-Name": "@ittybit/sdk",
                "X-Fern-SDK-Version": "0.8.0",
                "User-Agent": "@ittybit/sdk/0.8.0",
                "X-Fern-Runtime": core.RUNTIME.type,
                "X-Fern-Runtime-Version": core.RUNTIME.version,
                ...requestOptions?.headers,
            },
            contentType: "application/json",
            requestType: "json",
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return { data: _response.body as Ittybit.TaskResponse, rawResponse: _response.rawResponse };
        }

        if (_response.error.reason === "status-code") {
            throw new errors.IttybitError({
                statusCode: _response.error.statusCode,
                body: _response.error.body,
                rawResponse: _response.rawResponse,
            });
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.IttybitError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.IttybitTimeoutError("Timeout exceeded when calling GET /tasks/{id}.");
            case "unknown":
                throw new errors.IttybitError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    /**
     * Retrieves available task kinds and their configuration options.
     *
     * @param {Tasks.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.tasks.getTaskConfig()
     */
    public getTaskConfig(requestOptions?: Tasks.RequestOptions): core.HttpResponsePromise<Record<string, unknown>> {
        return core.HttpResponsePromise.fromPromise(this.__getTaskConfig(requestOptions));
    }

    private async __getTaskConfig(
        requestOptions?: Tasks.RequestOptions,
    ): Promise<core.WithRawResponse<Record<string, unknown>>> {
        const _response = await (this._options.fetcher ?? core.fetcher)({
            url: urlJoin(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.IttybitEnvironment.Default,
                "tasks-config",
            ),
            method: "GET",
            headers: {
                Authorization: await this._getAuthorizationHeader(),
                ACCEPT_VERSION:
                    (await core.Supplier.get(this._options.version)) != null
                        ? (await core.Supplier.get(this._options.version)).toString()
                        : undefined,
                "X-Fern-Language": "JavaScript",
                "X-Fern-SDK-Name": "@ittybit/sdk",
                "X-Fern-SDK-Version": "0.8.0",
                "User-Agent": "@ittybit/sdk/0.8.0",
                "X-Fern-Runtime": core.RUNTIME.type,
                "X-Fern-Runtime-Version": core.RUNTIME.version,
                ...requestOptions?.headers,
            },
            contentType: "application/json",
            requestType: "json",
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return { data: _response.body as Record<string, unknown>, rawResponse: _response.rawResponse };
        }

        if (_response.error.reason === "status-code") {
            throw new errors.IttybitError({
                statusCode: _response.error.statusCode,
                body: _response.error.body,
                rawResponse: _response.rawResponse,
            });
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.IttybitError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.IttybitTimeoutError("Timeout exceeded when calling GET /tasks-config.");
            case "unknown":
                throw new errors.IttybitError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    protected async _getAuthorizationHeader(): Promise<string | undefined> {
        const bearer = await core.Supplier.get(this._options.token);
        if (bearer != null) {
            return `Bearer ${bearer}`;
        }

        return undefined;
    }
}
