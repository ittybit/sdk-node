/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as environments from "../../../../environments";
import * as core from "../../../../core";
import * as Ittybit from "../../../index";
import urlJoin from "url-join";
import * as errors from "../../../../errors/index";

export declare namespace Files {
    export interface Options {
        environment?: core.Supplier<environments.IttybitEnvironment | string>;
        /** Specify a custom URL to connect the client to. */
        baseUrl?: core.Supplier<string>;
        token: core.Supplier<core.BearerToken>;
        fetcher?: core.FetchFunction;
    }

    export interface RequestOptions {
        /** The maximum time to wait for a response in seconds. */
        timeoutInSeconds?: number;
        /** The number of times to retry the request. Defaults to 2. */
        maxRetries?: number;
        /** A hook to abort the request. */
        abortSignal?: AbortSignal;
        /** Additional headers to include in the request. */
        headers?: Record<string, string>;
    }
}

/**
 * Manage individual file assets
 */
export class Files {
    constructor(protected readonly _options: Files.Options) {}

    /**
     * Retrieves a paginated list of all files associated with the current project. Files can be filtered using query parameters.
     *
     * @param {Ittybit.FilesListRequest} request
     * @param {Files.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Ittybit.BadRequestError}
     *
     * @example
     *     await client.files.list()
     */
    public list(
        request: Ittybit.FilesListRequest = {},
        requestOptions?: Files.RequestOptions,
    ): core.HttpResponsePromise<Ittybit.FilesListResponse> {
        return core.HttpResponsePromise.fromPromise(this.__list(request, requestOptions));
    }

    private async __list(
        request: Ittybit.FilesListRequest = {},
        requestOptions?: Files.RequestOptions,
    ): Promise<core.WithRawResponse<Ittybit.FilesListResponse>> {
        const { page, limit } = request;
        const _queryParams: Record<string, string | string[] | object | object[] | null> = {};
        if (page != null) {
            _queryParams["page"] = page.toString();
        }

        if (limit != null) {
            _queryParams["limit"] = limit.toString();
        }

        const _response = await (this._options.fetcher ?? core.fetcher)({
            url: urlJoin(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.IttybitEnvironment.Default,
                "files",
            ),
            method: "GET",
            headers: {
                Authorization: await this._getAuthorizationHeader(),
                "X-Fern-Language": "JavaScript",
                "X-Fern-SDK-Name": "@ittybit/sdk",
                "X-Fern-SDK-Version": "0.7.2",
                "User-Agent": "@ittybit/sdk/0.7.2",
                "X-Fern-Runtime": core.RUNTIME.type,
                "X-Fern-Runtime-Version": core.RUNTIME.version,
                ...requestOptions?.headers,
            },
            contentType: "application/json",
            queryParameters: _queryParams,
            requestType: "json",
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return { data: _response.body as Ittybit.FilesListResponse, rawResponse: _response.rawResponse };
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 400:
                    throw new Ittybit.BadRequestError(_response.error.body as unknown, _response.rawResponse);
                default:
                    throw new errors.IttybitError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                        rawResponse: _response.rawResponse,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.IttybitError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.IttybitTimeoutError("Timeout exceeded when calling GET /files.");
            case "unknown":
                throw new errors.IttybitError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    /**
     * Registers a file from a publicly accessible URL. The file will be ingested asynchronously.
     *
     * @param {Ittybit.FilesCreateFromUrlRequest} request
     * @param {Files.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Ittybit.BadRequestError}
     * @throws {@link Ittybit.UnauthorizedError}
     * @throws {@link Ittybit.ForbiddenError}
     * @throws {@link Ittybit.NotFoundError}
     *
     * @example
     *     await client.files.createFromUrl({
     *         url: "https://storage.googleapis.com/gtv-videos-bucket/sample/BigBuckBunny.mp4",
     *         filename: "BigBuckBunny.mp4",
     *         folder: "examples/cartoons",
     *         metadata: {
     *             "source": "google_storage_sample"
     *         }
     *     })
     */
    public createFromUrl(
        request: Ittybit.FilesCreateFromUrlRequest,
        requestOptions?: Files.RequestOptions,
    ): core.HttpResponsePromise<Ittybit.FilesCreateFromUrlResponse> {
        return core.HttpResponsePromise.fromPromise(this.__createFromUrl(request, requestOptions));
    }

    private async __createFromUrl(
        request: Ittybit.FilesCreateFromUrlRequest,
        requestOptions?: Files.RequestOptions,
    ): Promise<core.WithRawResponse<Ittybit.FilesCreateFromUrlResponse>> {
        const _response = await (this._options.fetcher ?? core.fetcher)({
            url: urlJoin(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.IttybitEnvironment.Default,
                "files",
            ),
            method: "POST",
            headers: {
                Authorization: await this._getAuthorizationHeader(),
                "X-Fern-Language": "JavaScript",
                "X-Fern-SDK-Name": "@ittybit/sdk",
                "X-Fern-SDK-Version": "0.7.2",
                "User-Agent": "@ittybit/sdk/0.7.2",
                "X-Fern-Runtime": core.RUNTIME.type,
                "X-Fern-Runtime-Version": core.RUNTIME.version,
                ...requestOptions?.headers,
            },
            contentType: "application/json",
            requestType: "json",
            body: request,
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return { data: _response.body as Ittybit.FilesCreateFromUrlResponse, rawResponse: _response.rawResponse };
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 400:
                    throw new Ittybit.BadRequestError(_response.error.body as unknown, _response.rawResponse);
                case 401:
                    throw new Ittybit.UnauthorizedError(_response.error.body as unknown, _response.rawResponse);
                case 403:
                    throw new Ittybit.ForbiddenError(_response.error.body as unknown, _response.rawResponse);
                case 404:
                    throw new Ittybit.NotFoundError(_response.error.body as unknown, _response.rawResponse);
                default:
                    throw new errors.IttybitError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                        rawResponse: _response.rawResponse,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.IttybitError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.IttybitTimeoutError("Timeout exceeded when calling POST /files.");
            case "unknown":
                throw new errors.IttybitError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    /**
     * Retrieves detailed information about a specific file identified by its unique ID, including its metadata, media associations, and technical properties.
     *
     * @param {string} id - Unique identifier of the file to retrieve. Must be a valid file ID (e.g., file_7bKpN2950Dx4EW8T).
     * @param {Files.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Ittybit.NotFoundError}
     *
     * @example
     *     await client.files.get("id")
     */
    public get(id: string, requestOptions?: Files.RequestOptions): core.HttpResponsePromise<Ittybit.FilesGetResponse> {
        return core.HttpResponsePromise.fromPromise(this.__get(id, requestOptions));
    }

    private async __get(
        id: string,
        requestOptions?: Files.RequestOptions,
    ): Promise<core.WithRawResponse<Ittybit.FilesGetResponse>> {
        const _response = await (this._options.fetcher ?? core.fetcher)({
            url: urlJoin(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.IttybitEnvironment.Default,
                `files/${encodeURIComponent(id)}`,
            ),
            method: "GET",
            headers: {
                Authorization: await this._getAuthorizationHeader(),
                "X-Fern-Language": "JavaScript",
                "X-Fern-SDK-Name": "@ittybit/sdk",
                "X-Fern-SDK-Version": "0.7.2",
                "User-Agent": "@ittybit/sdk/0.7.2",
                "X-Fern-Runtime": core.RUNTIME.type,
                "X-Fern-Runtime-Version": core.RUNTIME.version,
                ...requestOptions?.headers,
            },
            contentType: "application/json",
            requestType: "json",
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return { data: _response.body as Ittybit.FilesGetResponse, rawResponse: _response.rawResponse };
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 404:
                    throw new Ittybit.NotFoundError(_response.error.body as unknown, _response.rawResponse);
                default:
                    throw new errors.IttybitError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                        rawResponse: _response.rawResponse,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.IttybitError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.IttybitTimeoutError("Timeout exceeded when calling GET /files/{id}.");
            case "unknown":
                throw new errors.IttybitError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    /**
     * Permanently removes a file from the system. This action cannot be undone. Associated media entries may still reference this file ID.
     *
     * @param {string} id - Unique identifier of the file to delete. Must be a valid file ID (e.g., file_7bKpN2950Dx4EW8T).
     * @param {Files.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Ittybit.UnauthorizedError}
     * @throws {@link Ittybit.ForbiddenError}
     * @throws {@link Ittybit.NotFoundError}
     *
     * @example
     *     await client.files.delete("id")
     */
    public delete(
        id: string,
        requestOptions?: Files.RequestOptions,
    ): core.HttpResponsePromise<Ittybit.FilesDeleteResponse> {
        return core.HttpResponsePromise.fromPromise(this.__delete(id, requestOptions));
    }

    private async __delete(
        id: string,
        requestOptions?: Files.RequestOptions,
    ): Promise<core.WithRawResponse<Ittybit.FilesDeleteResponse>> {
        const _response = await (this._options.fetcher ?? core.fetcher)({
            url: urlJoin(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.IttybitEnvironment.Default,
                `files/${encodeURIComponent(id)}`,
            ),
            method: "DELETE",
            headers: {
                Authorization: await this._getAuthorizationHeader(),
                "X-Fern-Language": "JavaScript",
                "X-Fern-SDK-Name": "@ittybit/sdk",
                "X-Fern-SDK-Version": "0.7.2",
                "User-Agent": "@ittybit/sdk/0.7.2",
                "X-Fern-Runtime": core.RUNTIME.type,
                "X-Fern-Runtime-Version": core.RUNTIME.version,
                ...requestOptions?.headers,
            },
            contentType: "application/json",
            requestType: "json",
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return { data: _response.body as Ittybit.FilesDeleteResponse, rawResponse: _response.rawResponse };
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 401:
                    throw new Ittybit.UnauthorizedError(_response.error.body as unknown, _response.rawResponse);
                case 403:
                    throw new Ittybit.ForbiddenError(_response.error.body as unknown, _response.rawResponse);
                case 404:
                    throw new Ittybit.NotFoundError(_response.error.body as unknown, _response.rawResponse);
                default:
                    throw new errors.IttybitError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                        rawResponse: _response.rawResponse,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.IttybitError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.IttybitTimeoutError("Timeout exceeded when calling DELETE /files/{id}.");
            case "unknown":
                throw new errors.IttybitError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    /**
     * Updates metadata, filename, or folder properties of an existing file. Only the specified fields will be updated.
     *
     * @param {string} id - Unique identifier of the file to update. Must be a valid file ID (e.g., file_abc123).
     * @param {Ittybit.FilesUpdateMetadataRequest} request
     * @param {Files.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Ittybit.BadRequestError}
     * @throws {@link Ittybit.UnauthorizedError}
     * @throws {@link Ittybit.ForbiddenError}
     * @throws {@link Ittybit.NotFoundError}
     *
     * @example
     *     await client.files.updateMetadata("id", {
     *         metadata: {
     *             "status": "approved",
     *             "reviewed_by": "user_abc"
     *         }
     *     })
     *
     * @example
     *     await client.files.updateMetadata("id", {
     *         filename: "final_approved_video.mp4",
     *         folder: "archive/2024"
     *     })
     */
    public updateMetadata(
        id: string,
        request: Ittybit.FilesUpdateMetadataRequest = {},
        requestOptions?: Files.RequestOptions,
    ): core.HttpResponsePromise<Ittybit.FilesUpdateMetadataResponse> {
        return core.HttpResponsePromise.fromPromise(this.__updateMetadata(id, request, requestOptions));
    }

    private async __updateMetadata(
        id: string,
        request: Ittybit.FilesUpdateMetadataRequest = {},
        requestOptions?: Files.RequestOptions,
    ): Promise<core.WithRawResponse<Ittybit.FilesUpdateMetadataResponse>> {
        const _response = await (this._options.fetcher ?? core.fetcher)({
            url: urlJoin(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.IttybitEnvironment.Default,
                `files/${encodeURIComponent(id)}`,
            ),
            method: "PATCH",
            headers: {
                Authorization: await this._getAuthorizationHeader(),
                "X-Fern-Language": "JavaScript",
                "X-Fern-SDK-Name": "@ittybit/sdk",
                "X-Fern-SDK-Version": "0.7.2",
                "User-Agent": "@ittybit/sdk/0.7.2",
                "X-Fern-Runtime": core.RUNTIME.type,
                "X-Fern-Runtime-Version": core.RUNTIME.version,
                ...requestOptions?.headers,
            },
            contentType: "application/json",
            requestType: "json",
            body: request,
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return { data: _response.body as Ittybit.FilesUpdateMetadataResponse, rawResponse: _response.rawResponse };
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 400:
                    throw new Ittybit.BadRequestError(_response.error.body as unknown, _response.rawResponse);
                case 401:
                    throw new Ittybit.UnauthorizedError(_response.error.body as unknown, _response.rawResponse);
                case 403:
                    throw new Ittybit.ForbiddenError(_response.error.body as unknown, _response.rawResponse);
                case 404:
                    throw new Ittybit.NotFoundError(_response.error.body as unknown, _response.rawResponse);
                default:
                    throw new errors.IttybitError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                        rawResponse: _response.rawResponse,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.IttybitError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.IttybitTimeoutError("Timeout exceeded when calling PATCH /files/{id}.");
            case "unknown":
                throw new errors.IttybitError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    protected async _getAuthorizationHeader(): Promise<string> {
        return `Bearer ${await core.Supplier.get(this._options.token)}`;
    }
}
