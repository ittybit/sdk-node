/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as environments from "../../../../environments";
import * as core from "../../../../core";
import * as Ittybit from "../../../index";
import urlJoin from "url-join";
import * as errors from "../../../../errors/index";

export declare namespace Signatures {
    export interface Options {
        environment?: core.Supplier<environments.IttybitEnvironment | string>;
        /** Specify a custom URL to connect the client to. */
        baseUrl?: core.Supplier<string>;
        token?: core.Supplier<core.BearerToken | undefined>;
        /** Override the Accept-Version header */
        acceptVersion: core.Supplier<string>;
        fetcher?: core.FetchFunction;
    }

    export interface RequestOptions {
        /** The maximum time to wait for a response in seconds. */
        timeoutInSeconds?: number;
        /** The number of times to retry the request. Defaults to 2. */
        maxRetries?: number;
        /** A hook to abort the request. */
        abortSignal?: AbortSignal;
        /** Override the Accept-Version header */
        acceptVersion?: string;
        /** Additional headers to include in the request. */
        headers?: Record<string, string>;
    }
}

/**
 * Generate signed URLs
 */
export class Signatures {
    constructor(protected readonly _options: Signatures.Options) {}

    /**
     * Creates a cryptographically signed URL that provides temporary and restricted access to a file. The URL can expire after a specified time and be limited to specific HTTP methods.
     *
     * @param {Ittybit.SignaturesCreateRequest} request
     * @param {Signatures.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Ittybit.BadRequestError}
     * @throws {@link Ittybit.UnauthorizedError}
     *
     * @example
     *     await client.signatures.create({
     *         filename: "video.mp4",
     *         folder: "private/user_123",
     *         expiry: 1735689600,
     *         method: "get"
     *     })
     */
    public create(
        request: Ittybit.SignaturesCreateRequest,
        requestOptions?: Signatures.RequestOptions,
    ): core.HttpResponsePromise<Ittybit.SignatureResponse> {
        return core.HttpResponsePromise.fromPromise(this.__create(request, requestOptions));
    }

    private async __create(
        request: Ittybit.SignaturesCreateRequest,
        requestOptions?: Signatures.RequestOptions,
    ): Promise<core.WithRawResponse<Ittybit.SignatureResponse>> {
        const _response = await (this._options.fetcher ?? core.fetcher)({
            url: urlJoin(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.IttybitEnvironment.Default,
                "signatures",
            ),
            method: "POST",
            headers: {
                Authorization: await this._getAuthorizationHeader(),
                "Accept-Version": await core.Supplier.get(this._options.acceptVersion),
                "X-Fern-Language": "JavaScript",
                "X-Fern-SDK-Name": "ittybit",
                "X-Fern-SDK-Version": "0.0.1",
                "User-Agent": "ittybit/0.0.1",
                "X-Fern-Runtime": core.RUNTIME.type,
                "X-Fern-Runtime-Version": core.RUNTIME.version,
                ...requestOptions?.headers,
            },
            contentType: "application/json",
            requestType: "json",
            body: request,
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return { data: _response.body as Ittybit.SignatureResponse, rawResponse: _response.rawResponse };
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 400:
                    throw new Ittybit.BadRequestError(_response.error.body as unknown, _response.rawResponse);
                case 401:
                    throw new Ittybit.UnauthorizedError(_response.error.body as unknown, _response.rawResponse);
                default:
                    throw new errors.IttybitError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                        rawResponse: _response.rawResponse,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.IttybitError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.IttybitTimeoutError("Timeout exceeded when calling POST /signatures.");
            case "unknown":
                throw new errors.IttybitError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    protected async _getAuthorizationHeader(): Promise<string | undefined> {
        const bearer = await core.Supplier.get(this._options.token);
        if (bearer != null) {
            return `Bearer ${bearer}`;
        }

        return undefined;
    }
}
